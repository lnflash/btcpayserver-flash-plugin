@model BTCPayServer.Plugins.Flash.Models.FlashPayoutDashboardViewModel
@{
    ViewData["Title"] = "Flash Pull Payment Dashboard";
    Layout = "../Shared/_NavLayout.cshtml";
    ViewData["NavPartialName"] = "../UIStores/_Nav";
    ViewData.SetActivePage("Flash", "Pull Payment Dashboard", "PayoutDashboard");
}

@section PageHeadContent {
    <link rel="stylesheet" href="~/vendor/chartist/chartist.css" asp-append-version="true" />
    <style>
        .payout-card {
            background: var(--btcpay-body-bg);
            border: 1px solid var(--btcpay-body-border-light);
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: box-shadow 0.2s;
        }
        .payout-card:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .stat-card {
            text-align: center;
            padding: 1.5rem;
            background: var(--btcpay-body-bg);
            border: 1px solid var(--btcpay-body-border-light);
            border-radius: 8px;
        }
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: var(--btcpay-primary);
        }
        .stat-label {
            color: var(--btcpay-body-text-muted);
            margin-top: 0.5rem;
        }
        .boltcard-tag {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            background: var(--btcpay-primary-bg);
            color: var(--btcpay-primary);
            border-radius: 16px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        .status-completed {
            background: var(--btcpay-success-bg);
            color: var(--btcpay-success);
        }
        .status-pending {
            background: var(--btcpay-warning-bg);
            color: var(--btcpay-warning);
        }
        .status-failed {
            background: var(--btcpay-danger-bg);
            color: var(--btcpay-danger);
        }
        .timeline-chart {
            height: 300px;
        }
    </style>
}

<div class="sticky-header">
    <h2>
        <span class="text-muted">@Model.StoreName</span> Flash Pull Payment Dashboard
    </h2>
    <div class="d-flex gap-2">
        <button class="btn btn-primary" id="refreshDashboard">
            <i class="fa fa-refresh"></i> Refresh
        </button>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="fa fa-download"></i> Export
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="@Url.Action("ExportPayouts", new { storeId = Model.StoreId, format = "csv" })">Export as CSV</a></li>
                <li><a class="dropdown-item" href="@Url.Action("ExportPayouts", new { storeId = Model.StoreId, format = "json" })">Export as JSON</a></li>
            </ul>
        </div>
    </div>
</div>

<div class="row mt-4">
    <!-- Statistics Cards -->
    <div class="col-md-3 col-sm-6 mb-4">
        <div class="stat-card">
            <div class="stat-value">@Model.Stats.TotalPayouts</div>
            <div class="stat-label">Total Payouts</div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6 mb-4">
        <div class="stat-card">
            <div class="stat-value">@Model.Stats.ActivePayouts</div>
            <div class="stat-label">Active</div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6 mb-4">
        <div class="stat-card">
            <div class="stat-value">@Model.FormattedTotalBtc</div>
            <div class="stat-label">Total Paid</div>
        </div>
    </div>
    <div class="col-md-3 col-sm-6 mb-4">
        <div class="stat-card">
            <div class="stat-value">@Model.Stats.UniqueBoltcards</div>
            <div class="stat-label">Unique Boltcards</div>
        </div>
    </div>
</div>

<!-- Timeline Chart -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h4>Payout Timeline (Last 30 Days)</h4>
            </div>
            <div class="card-body">
                <div id="timeline-chart" class="timeline-chart"></div>
            </div>
        </div>
    </div>
</div>

<!-- Boltcard Analytics -->
@if (Model.BoltcardStats.Any())
{
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4>Top Boltcards</h4>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Boltcard ID</th>
                                    <th>Total Payouts</th>
                                    <th>Total Amount</th>
                                    <th>Days Active</th>
                                    <th>Last Used</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var boltcard in Model.BoltcardStats)
                                {
                                    <tr>
                                        <td><span class="boltcard-tag">@boltcard.BoltcardId</span></td>
                                        <td>@boltcard.TotalPayouts</td>
                                        <td>@boltcard.TotalAmountBtc.ToString("0.00000000") BTC</td>
                                        <td>@boltcard.DaysActive</td>
                                        <td>@boltcard.LastUsed.ToString("g")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Recent Payouts -->
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4>Recent Payouts</h4>
                <button class="btn btn-sm btn-outline-primary" onclick="loadMorePayouts()">
                    Load More
                </button>
            </div>
            <div class="card-body">
                <div id="payouts-container">
                    @foreach (var payout in Model.RecentPayouts)
                    {
                        <div class="payout-card" data-payout-id="@payout.Id">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="d-flex align-items-center gap-3">
                                        <div>
                                            <strong>@payout.AmountBtc.ToString("0.00000000") BTC</strong>
                                            <div class="text-muted small">@payout.AmountSats sats</div>
                                        </div>
                                        <div>
                                            <span class="status-badge status-@payout.Status.ToLower()">
                                                @payout.Status
                                            </span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(payout.BoltcardId))
                                        {
                                            <div>
                                                <span class="boltcard-tag">@payout.BoltcardId</span>
                                            </div>
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(payout.Memo))
                                    {
                                        <div class="mt-2 text-muted">@payout.Memo</div>
                                    }
                                </div>
                                <div class="col-md-4 text-end">
                                    <div class="text-muted small">
                                        @payout.CreatedAt.ToString("g")
                                    </div>
                                    @if (!string.IsNullOrEmpty(payout.PaymentHash))
                                    {
                                        <div class="mt-1">
                                            <code class="small">@payout.PaymentHash.Substring(0, 16)...</code>
                                            <button class="btn btn-sm btn-link" onclick="copyToClipboard('@payout.PaymentHash')">
                                                <i class="fa fa-copy"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section PageFootContent {
    <script src="~/vendor/chartist/chartist.js" asp-append-version="true"></script>
    <script>
        // Timeline chart data
        const timelineData = {
            labels: [@Html.Raw(string.Join(",", Model.Timeline.Select(t => $"'{t.Date:MMM d}'")))],
            series: [{
                name: 'Payouts',
                data: [@string.Join(",", Model.Timeline.Select(t => t.Count))]
            }]
        };

        // Create timeline chart
        new Chartist.Line('#timeline-chart', timelineData, {
            fullWidth: true,
            chartPadding: { right: 40 },
            axisY: {
                onlyInteger: true,
                offset: 20
            }
        });

        // Refresh dashboard
        document.getElementById('refreshDashboard').addEventListener('click', function() {
            location.reload();
        });

        // Copy to clipboard
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                // Show success message
                const toast = document.createElement('div');
                toast.className = 'toast show position-fixed bottom-0 end-0 m-3';
                toast.innerHTML = '<div class="toast-body">Copied to clipboard!</div>';
                document.body.appendChild(toast);
                setTimeout(() => toast.remove(), 2000);
            });
        }

        // Load more payouts
        let currentSkip = @Model.RecentPayouts.Count;
        function loadMorePayouts() {
            fetch(`@Url.Action("GetPayouts")?storeId=@Model.StoreId&skip=${currentSkip}&take=10`)
                .then(response => response.json())
                .then(data => {
                    const container = document.getElementById('payouts-container');
                    data.payouts.forEach(payout => {
                        const card = createPayoutCard(payout);
                        container.appendChild(card);
                    });
                    currentSkip += data.payouts.length;
                    
                    if (!data.hasMore) {
                        document.querySelector('button[onclick="loadMorePayouts()"]').style.display = 'none';
                    }
                });
        }

        // Create payout card element
        function createPayoutCard(payout) {
            const div = document.createElement('div');
            div.className = 'payout-card';
            div.dataset.payoutId = payout.id;
            
            const statusClass = `status-${payout.status.toLowerCase()}`;
            const boltcardHtml = payout.boltcardId 
                ? `<div><span class="boltcard-tag">${payout.boltcardId}</span></div>` 
                : '';
            
            div.innerHTML = `
                <div class="row">
                    <div class="col-md-8">
                        <div class="d-flex align-items-center gap-3">
                            <div>
                                <strong>${payout.amountBtc.toFixed(8)} BTC</strong>
                                <div class="text-muted small">${payout.amountSats} sats</div>
                            </div>
                            <div>
                                <span class="status-badge ${statusClass}">
                                    ${payout.status}
                                </span>
                            </div>
                            ${boltcardHtml}
                        </div>
                        ${payout.memo ? `<div class="mt-2 text-muted">${payout.memo}</div>` : ''}
                    </div>
                    <div class="col-md-4 text-end">
                        <div class="text-muted small">
                            ${new Date(payout.createdAt).toLocaleString()}
                        </div>
                        ${payout.paymentHash ? `
                            <div class="mt-1">
                                <code class="small">${payout.paymentHash.substring(0, 16)}...</code>
                                <button class="btn btn-sm btn-link" onclick="copyToClipboard('${payout.paymentHash}')">
                                    <i class="fa fa-copy"></i>
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
            
            return div;
        }

        // Auto-refresh every 30 seconds
        setInterval(() => {
            // Could implement WebSocket for real-time updates instead
        }, 30000);
    </script>
}