@using BTCPayServer.Plugins.Flash.Models
@model FlashPluginSettings
@{
    ViewData["Title"] = "Flash Lightning Settings";
}

<div class="card mb-4">
    <div class="card-header">
        <h3 class="mb-0">Flash Lightning Settings</h3>
    </div>
    <div class="card-body">
        <form method="post">
            <div class="form-group">
                <label asp-for="BearerToken" class="form-label"></label>
                <input asp-for="BearerToken" class="form-control" required />
                <span asp-validation-for="BearerToken" class="text-danger"></span>
                <div class="form-text text-muted">
                    Enter your Flash bearer token obtained from the Flash mobile app.
                </div>
            </div>

            <div class="form-group mt-4">
                <label asp-for="ApiEndpoint" class="form-label">API Endpoint</label>
                <input asp-for="ApiEndpoint" class="form-control"
                    value="@(Model.ApiEndpoint ?? "https://api.flashapp.me/graphql")" />
                <div class="form-text text-muted">
                    The Flash GraphQL API endpoint. You typically don't need to change this.
                </div>
            </div>

            <div class="form-group mt-4">
                <button id="test-connection" type="button" class="btn btn-outline-primary">Test Connection</button>
                <div id="test-connection-result" class="mt-2 d-none">
                    <div id="success-result" class="alert alert-success d-none">
                        <i class="fa fa-check-circle"></i> <span id="success-message"></span>
                    </div>
                    <div id="error-result" class="alert alert-danger d-none">
                        <i class="fa fa-exclamation-circle"></i> <span id="error-message"></span>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-primary mt-4">Save Settings</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('test-connection').addEventListener('click', function () {
            const token = document.getElementById('BearerToken').value;
            if (!token) {
                showError('Please enter a bearer token first.');
                return;
            }

            // Show loading state
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Testing...';

            const resultElement = document.getElementById('test-connection-result');
            const successElement = document.getElementById('success-result');
            const errorElement = document.getElementById('error-result');
            const successMessageElement = document.getElementById('success-message');
            const errorMessageElement = document.getElementById('error-message');

            // Reset previous results
            resultElement.classList.add('d-none');
            successElement.classList.add('d-none');
            errorElement.classList.add('d-none');

            // Get the store ID from the URL
            const pathParts = window.location.pathname.split('/');
            const storeId = pathParts[pathParts.length - 1];

            fetch(`/plugins/flash/test-connection/${storeId}`)
                .then(response => response.json())
                .then(data => {
                    resultElement.classList.remove('d-none');

                    if (data.success) {
                        successElement.classList.remove('d-none');
                        successMessageElement.textContent = data.message;
                    } else {
                        errorElement.classList.remove('d-none');
                        errorMessageElement.textContent = data.message;
                    }
                })
                .catch(error => {
                    resultElement.classList.remove('d-none');
                    errorElement.classList.remove('d-none');
                    errorMessageElement.textContent = `Error: ${error.message}`;
                })
                .finally(() => {
                    // Reset button state
                    this.disabled = false;
                    this.innerHTML = 'Test Connection';
                });
        });

        function showError(message) {
            const resultElement = document.getElementById('test-connection-result');
            const errorElement = document.getElementById('error-result');
            const errorMessageElement = document.getElementById('error-message');

            resultElement.classList.remove('d-none');
            errorElement.classList.remove('d-none');
            document.getElementById('success-result').classList.add('d-none');
            errorMessageElement.textContent = message;
        }
    </script>
}